<?xml version="1.0" ?>
<!DOCTYPE TranscendenceExtension
[
	<!ENTITY DDR_unidDDRDemoExtension		"0xD3140007">
    
	<!ENTITY DDR_itDemoROM			        "0xD3140700">
	<!ENTITY DDR_itDemoROMTlisp		        "0xD3140701">
	<!ENTITY DDR_itDemoROMRTF		        "0xD3140702">

	<!ENTITY DDR_unidDDRDemoExtCover		"0xD31407FF">
	<!-- EXTERNAL -->
	<!ENTITY DDR_unidDDRLibrary			    "0xA0030019">
]>

<TranscendenceExtension UNID="&DDR_unidDDRDemoExtension;"
	name="Dynamic Data Roms - Demo ROM"
	credits="Arisaya"
	release="1"
	version="1.0.0.1"
	apiVersion="53"
	coverImageID=	"&DDR_unidDDRDemoExtCover;"
	>
	<Image UNID="&DDR_unidDDRDemoExtCover;"	bitmap="resources/images/covers/DDRCover.png"/>

	<!-- Libraries -->

	<Library unid="&DDR_unidDDRLibrary;"/>
	<!-- Include the core libraries for API29+ -->
	<Library unid="&unidCoreTypesLibrary;"/>
	<Library unid="&unidRPGLibrary;"/>
	<Library unid="&unidGalaxyLibrary;"/>
	<Library unid="&unidHumanSpaceLibrary;"/>

	<!-- INSTRUCTIONS
	To make your own roms with these demo templates, follow these steps:
	Prep:
	1) Copy the Entity and <Library> tag for DDR_unidDDRLibrary into your mod.
	Making a rom:
	1) copy the template into the appropriate section of your mod
	2) change the copy's UNID field to a new unique value
	3) copy the template's matching UNID ENTITY and change it to the new unique value from step 2
	4) change the hexadecimal number (0xPRFX####) to a unique value (remember to match the 'PRFX' part with your UNID range)
	5) go back to your copy of the template now and fill out the attributes:
		A) name: swap this to an item name for your rom. This is the name it displays in the inventory
		B) level: optionally change this - for lore roms, it will mainly adjust where it shows up in loot or for sale
		C) value: optionally change this - its just the base price in the adventure's default currency (credits for SOTP/EP/COHS)
		D) mass: optionally change this - this is the mass in kg of this item (must be an integer)
		E) frequency: optionally change this - it will mainly adjust where it shows up in loot or for sale.
			i) notRandom prevents it from randomly dropping and it must be added directly to inventories or spawned via script to show up.
			ii) valid values include: common uncommon rare veryRare notRandom
			iii) veryRare has a weight of 1, rare of 3, uncommon of 10, common of 20
		F) attributes: optionally change this:
			i) remove NotForSale if you want this to show up in stores
			ii) add a faction name attribute (ex, commonwealth, ares - note some expansions like TSB prefix attributes, ex TSB_coalition) to associate it with loot lists & stores (doesnt always work if faction lacks faction-specific loot tables)
		G) description: this description shows up when viewing the item in an inventory (looting treasure, a shop, your cargo bay)
		H) DO NOT TOUCH: inherit - this is used for dynamic data rom functionality
	6) Next, fill out the language sections:
		A) title: this is the title of your rom that displays when reading it, as well as in the dynamic data roms library feature, where it shows as the selectable name of the rom
		B) text: this is the text of your rom! Note, if you want to use Rich Formatted Text (RTF) you need to change the <Text id="Text">...</Text> into <RTF id="Text">...</RTF> (you can use the RTF template for this)
	7) your rom should be ready to go!
	-->

    <!-- Dockscreen hook -->

	<ItemType UNID="&DDR_itDemoROM;"
			name=				"Dynamic Data ROMs - Demo ROM"
			level=				"1"
			value=				"0"
			mass=				"1"
			frequency=			"notrandom"
			attributes=			"humanTech; Info; MinorItem; NotForSale"

			description=		"This rom is a demo/template for Dynamic Data ROMs."

			inherit=			"&DDR_baDataRom;"
			>
		<Language>
			<Text id="Title">
				How to use Dynamic Data ROMs
			</Text>
			<Text id="Text">
				Thanks for downloading Dynamic Data ROMs!

                This demo rom is designed to help you write your own lore ROMs,
                enabling them to appear in the universe as random loot, vendor
                items, or from missions - you can use them anywhere that items
                can be spawned, dropped, or sold!

                To make your own data roms, just copy the &amp;DDR_itDemoROM; item
                into your own &lt;TranscendenceExtension&gt; or &lt;TranscendenceLibrary&gt;.

                Next, give it a new UNID, a new name, possibly edit the value/frequency/attributes
                as appropriate, and then change the text inside of the &lt;Text&gt;
                block to whatever you desire!

				With basic text blocks like this one, there is very little formatting that you can do.
                
                "You can add pre-formatted dialogue like this simply by wrapping it in double quotes"

                \\"But if you don't want them to format differently than the rest of the text,
                you can add two backslashes before each double quote to display them like this instead.\\"

                The game will ignore single newlines (hitting enter once) followed by more text, and will
                automatically word-wrap them to fit the text area. However, It will create a new
                paragraph if you use a double-newline (hitting enter twice). If you want to force a new line
				within the same paragraph, use a backslash followed by an n:\n
				The line that follows (like this one) will be on a new line, but part of the same paragraph.

                The scrolling UI enables moving the text up and down by paragraph, so keep in mind that a
				very long paragraph can potentially overrun the entire text area, cutting off the end.
				
				It is strongly recommended to test your data rom by viewing the entire rom and making
				sure that nothing is cut off.

				Check out the "Tlisp Demo ROM" and the "Rich Text Demo ROM" for more advanced options.
			</Text>
		</Language>
	</ItemType>

	<ItemType UNID="&DDR_itDemoROMTlisp;"
			name=				"Dynamic Data ROMs - Tlisp Demo ROM"
			level=				"1"
			value=				"0"
			mass=				"1"
			frequency=			"notrandom"
			attributes=			"humanTech; Info; MinorItem; NotForSale"

			description=		"This rom is a demo/template for Tlisp in Dynamic Data ROMs."

			inherit=			"&DDR_baDataRom;"
			>
		<Language>
			<Text id="Title">
				How to use Tlisp in Dynamic Data ROMs
			</Text>
			<Text id="Text">
				(cat
                    (fmtCompose "Greetings %Name%! This ROM shows an example of ")
                    "how to composite together multiple strings using the (cat ...) tlisp "
                    "function!"
                    "\n\n"
                    "Formatting this sort of text is a bit more involved and requires more "
                    "work than normal text does, however it lets you do much more interesting "
                    "things by evaluating tlisp functions and inserting them as strings."
                    "\n\n"
                    "How this works, is that the (cat ...) (short for con[cat]enate) function allows you to input multiple "
                    "strings or tlisp expressions into it as different arguments, for example:"
					"\n\n"
                    " (cat \"You are flying a \" (objGetName gPlayership))"
					"\n\n"
                    "To do the double newlines to create new paragraphs, you will need to add in "
                    "\"\\\\n\\\\n\" as one of the string arguments to concatenant."
                )
			</Text>
		</Language>
	</ItemType>

	<ItemType UNID="&DDR_itDemoROMRTF;"
			name=				"Dynamic Data ROMs - Rich Text Demo ROM"
			level=				"1"
			value=				"0"
			mass=				"1"
			frequency=			"notrandom"
			attributes=			"humanTech; Info; MinorItem; NotForSale"

			description=		"This rom is a demo/template for Rich Text Formatting in Dynamic Data ROMs."

			inherit=			"&DDR_baDataRom;"
			>
		<Language>
			<Text id="Title">
				How to use Rich Text in Dynamic Data ROMs
			</Text>
			<RTF id="Text">
				{/rtf
					{/f:Title;/c:#79828c; Rich Text Formatting in Dynamic Data Roms}

					{/f:SubTitle;/c:#79828c; An Advanced Tutorial}

					This ROM will show you the power of {/f:LargeBold;/c:#80C0C0; rich text formatting} (RTF) in Dynamic Data Roms!
                    
                    {/f:LargeBold;/c:#FF0000; Note:} in order to preserve the formatting while scrolling, and due to
                    rudimentary default string operations available in Tlisp, the scrolling system in 1.9.2 is forced to use
                    a lot of string operations implemented in Tlisp rather than native C++ and this can cause performance
                    issues on computers with weak single threaded performance if you have a long RTF document with many RTF tags inside.

					{/f:HeaderBold;/c:#79828c; How to use RTF formatting}
                    
                    {/f:LargeBold;/c:#FF0000; Note:} this section uses descriptions in the example text
                    instead of curly braces and forward slashes becaue you cannot escape these characters in
                    RTF text as of version 1.9.2.

					To use RTF formatting, you first need to encapsulate your entire text in curly braces.
                    The first opening curly brace must be followed by a forward slash and then the text "rtf"

					Once you have done this step, you can create spans of text inside the "rtf" and closing curly brace
					by creating spans that specify a font, font modifiers - bold or italics, font color, or line spacing.

					To create a span, first open with an opening curly brace

					Then, add a forward slash and a format code like so:

					{/f:LargeBold;/c:#CCCC00; f} - Specific font - see Font Samples for valid font names

					{/f:LargeBold;/c:#CCCC00; c} - Colored Text - any 24 bit color works, specified in HTML-style such as #FFFFFF

                    Format codes that accept a parameter take a single colon between the format code and the parameter, followed by a semicolon after the parameter.

					Once you have added a format code, in some cases you can add more format codes, separated by a semicolon.
                    Here is some {/f:LargeBold;/c:#FF00FF; Bold and Magenta} text as an example.
                    Not all format codes support additional format codes however.

					After you have added the format codes you desire, you can then add the text you want formatted in that style.
					Note that you can even nest format spans inside of each other!

					Finally, close out your span with a closing curly brace.

                    {/c:#FFFF00;
                    You can even use a span across multiple paragraphs.

                    This was done with just one span
                    }

                    Note that there are several other format codes specified in the code, however they do not appear to be working in 1.9.2.
                    These codes are:

					{/f:LargeBold;/c:#CC0000; b} - Bold Text (Same as the font LargeBold)

					{/f:LargeBold;/c:#CC0000; i} - Itallic Text

					{/f:LargeBold;/c:#CC0000; lineSpacing} - Line Spacing - takes integer line spaces

					{/f:HeaderBold;/c:#79828c; Color Samples}

					{/c:#FFFFFF; #FFFFFF}

					{/c:#FF0000; #FF0000}

					{/c:#00FF00; #00FF00}

					{/c:#0000FF; #0000FF}

					{/c:#FFFF00; #FFFF00}

					{/c:#FF00FF; #FF00FF}

					{/c:#00FFFF; #00FFFF}

					{/c:#000000; #000000}

					{/f:HeaderBold;/c:#79828c; Font Samples}

					{/f:Small; Small}

					{/f:Medium; Medium}

					{/f:MediumBold; MediumBold}

					{/f:MediumHeavyBold; MediumHeavyBold}

					{/f:Large; Large}

					{/f:LargeBold; LargeBold}

					{/f:Header; Header}

					{/f:HeaderBold; HeaderBold}

					{/f:SubTitle; SubTitle}

					{/f:SubTitleBold; SubTitleBold}

					{/f:SubTitleHeavyBold; SubTitleHeavyBold}

					{/f:Title; Title}
				}
			</RTF>
		</Language>
	</ItemType>

</TranscendenceExtension>
